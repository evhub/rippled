from __future__ import absolute_import, division, print_function, unicode_literals

import curses
import ntpath
import os
import sys
import textwrap

def add_beast_to_path():
    python_home = os.path.join(os.getcwd(), 'python')
    if python_home not in sys.path:
        sys.path.append(python_home)

add_beast_to_path()

from beast.platform import GetEnvironment
from beast.util import Boost
from beast.util import File
from beast.util import Print
from beast.util import Tests

from beast.util.Environment import fill_environment

VARIANT_DIRECTORIES = {
    'beast': ('bin', 'beast'),
    'modules': ('bin', 'modules'),
}

BOOST_LIBRARIES = 'boost_system',

MAIN_PROGRAM_FILE = 'beast/unit_test/tests/main.cpp'

def main():
    #arguments = SConsArgs.parse(ARGUMENTS, DEFAULT_ARGUMENTS)
    #print(arguments)
    File.validate_libraries(Boost.LIBRARY_PATH, BOOST_LIBRARIES)
    defaults = GetEnvironment.get_environment([])
    env = Environment()
    fill_environment(env,
                     appends={'LIBPATH': Boost.LIBRARY_PATH},
                     environment_variables=defaults,
                     prepends={'CPPPATH': Boost.PATH},
                     replacements={'PRINT_CMD_LINE_FUNC': Print.print_cmd_line},
                     variant_directories=VARIANT_DIRECTORIES)
    Print.print_build_config(env, defaults)
    Tests.run_tests(env, MAIN_PROGRAM_FILE, '.', '.test.cpp')

main()
